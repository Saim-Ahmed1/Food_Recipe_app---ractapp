{"version":3,"sources":["recipe.js","App.js","reportWebVitals.js","index.js","recipe.module.css"],"names":["Recipe","title","calories","image","ingredients","className","style","recipe","imageWrapper","src","alt","map","ingredient","text","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","console","log","onSubmit","e","preventDefault","type","value","onChange","target","label","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"+QAqBeA,EAlBA,SAAC,GAAsC,IAArCC,EAAoC,EAApCA,MAAMC,EAA8B,EAA9BA,SAASC,EAAqB,EAArBA,MAAMC,EAAe,EAAfA,YAClC,OACI,sBAAKC,UAAWC,IAAMC,OAAtB,UACI,qBAAKF,UAAWC,IAAME,aAAtB,SACA,qBAAKC,IAAKN,EAAOO,IAAI,GAAGL,UAAWC,IAAMH,UAGzC,6BAAKF,IACL,6BACKG,EAAYO,KAAI,SAAAC,GAAU,OACvB,6BAAKA,EAAWC,YAGxB,2CAAcX,SC+CXY,G,MA3DH,WAEV,IAGA,EAA6BC,mBAAS,IAAtC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAA2BF,mBAAS,IAApC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAyBJ,mBAAS,WAAlC,mBAAOK,EAAP,KAAaC,EAAb,KAGAC,qBAAU,WACRC,MACA,CAACH,IAEH,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OAAoCL,EAApC,mBAbf,WAae,oBAZb,qCAWE,cACXM,EADW,gBAEEA,EAASC,OAFX,OAEXC,EAFW,OAGjBX,EAAWW,EAAKC,MAEhBC,QAAQC,IAAIH,GALK,2CAAH,qDAsBhB,OACE,sBAAKvB,UAAU,MAAf,UACE,uBAAMA,UAAU,cAAc2B,SAXhB,SAACC,GACjBA,EAAEC,iBACFb,EAASH,IASP,UACE,uBAAOb,UAAU,aAAa8B,KAAK,OAAOC,MAAOlB,EAAQmB,SAf1C,SAACJ,GACpBd,EAAUc,EAAEK,OAAOF,UAef,wBAAQ/B,UAAU,gBAAgB8B,KAAK,SAAvC,uBAGF,qBAAK9B,UAAU,UAAf,SACCW,EAAQL,KAAI,SAAAJ,GAAM,OACjB,cAAC,EAAD,CAEAN,MAAOM,EAAOA,OAAOgC,MACrBrC,SAAUK,EAAOA,OAAOL,SACxBC,MAAOI,EAAOA,OAAOJ,MACrBC,YAAaG,EAAOA,OAAOH,aAJtBG,EAAOA,OAAOgC,iBCtCZC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,OAAS,uBAAuB,aAAe,6BAA6B,MAAQ,yB","file":"static/js/main.0e55358f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport style from \"./recipe.module.css\";\r\n\r\nconst Recipe = ({title,calories,image,ingredients})=>{\r\n    return(\r\n        <div className={style.recipe}>\r\n            <div className={style.imageWrapper}>\r\n            <img src={image} alt=\"\" className={style.image} />\r\n            </div>\r\n\r\n            <h1>{title}</h1>\r\n            <ol>\r\n                {ingredients.map(ingredient =>(\r\n                    <li>{ingredient.text}</li>\r\n                ))}\r\n            </ol>\r\n            <p>Calories: {calories}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Recipe;","import React,{useEffect, useState} from 'react';\nimport Recipe from './recipe';\nimport './App.css';\n\nconst App = () => {\n\n  const APP_ID = \"8813f94d\";\n  const APP_KEY  = \"1214113f49293b2a6aa0ec15e7c86f99\";\n\n  const [recipes,setRecipes] = useState([]);\n  const [search,setSearch] = useState('');\n  const [query,setQuery] = useState('chicken');\n\n\n  useEffect(()=>{\n    getRecipes();\n  },[query]);\n\n  const getRecipes = async () =>{\n    const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`)\n    const data = await response.json();\n    setRecipes(data.hits)\n\n    console.log(data)\n  }\n\n\n\n  const updateSearch = (e)=>{\n    setSearch(e.target.value);\n  }\n  const getSearch = (e)=>{\n    e.preventDefault();\n    setQuery(search)\n  }\n\n\n\n\n\n  return (\n    <div className=\"App\">\n      <form className=\"search-form\" onSubmit={getSearch}>\n        <input className=\"search-bar\" type=\"text\" value={search} onChange={updateSearch}/>\n        <button className=\"search-button\" type=\"submit\">Search</button>\n      </form>\n      \n      <div className=\"recipes\">\n      {recipes.map(recipe =>(\n        <Recipe \n        key={recipe.recipe.label}\n        title={recipe.recipe.label} \n        calories={recipe.recipe.calories}\n        image={recipe.recipe.image}\n        ingredients={recipe.recipe.ingredients}\n         />\n      ))}\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__P9jKH\",\"imageWrapper\":\"recipe_imageWrapper__1pxef\",\"image\":\"recipe_image__1bEGF\"};"],"sourceRoot":""}